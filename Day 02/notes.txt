Everything in JavaScript is Object


Todays Day is All about Data types

Two kind of data Types in JS 

1. Primitive Data types (unmutable or unmodifiable)
Eg: Strings, integers, floats, undefined, null, boolean etc.

- Once you create a Primitive data type, you cannot modify it.
-You can compare two same type of Primitive data types by value



2. Non-Primitive data types (mutable or modifiabe)
Eg: arrays, objects etc.

-You cannot compare two Non-Primitive data types by value, Even if two non-primitive data types have the same properties and values, they are not strictly equal.
---Rule of thumb, we do not compare non-primitive data types. Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types, because they are being compared by reference instead of value. Two objects are only strictly equal if they refer to the same underlying object.

example :

let nums = [1, 2, 3]
let numbers = nums

console.log(nums == numbers)  // true

let userOne = {
name:'Asabeneh',
role:'teaching',
country:'Finland'
}

let userTwo = userOne

console.log(userOne == userTwo)  // true


///Numbers
You 'const' keyword for constant non-changing values
eg: const gravity = 9.81; , const pI = 3.14;

In JavaScript the Math Object provides a lots of methods to work with numbers.

Math object functions

Math.round() // for rounding down to nearest number
Math.floor() //rounding down a num.
Math.ceil() //rounding up a num.
Math.min(x, y , z , g , m) // returns the minimum value from the inputted values
Math.max(x, y , z , g , m) // returns the maximum value from the inputted values
Math.random() //generates a random number bw 0 to 0.9999....
Math.abs(-69) // returns 69 (a positive absolute value)
Math.sqrt(x) //returns the square root of a number
Math.pow (baseValue, power) // returns the vlaue by applying power on the base value eg Math.pow(6,2) // returns 36.
Math.E //returns euler number (Mathematic constant)

// Logarithm
// Returns the natural logarithm with base E of x, Math.log(x)
console.log(Math.log(2))        // 0.6931471805599453
console.log(Math.log(10))       // 2.302585092994046

// Returns the natural logarithm of 2 and 10 respectively
console.log(Math.LN2)           // 0.6931471805599453
console.log(Math.LN10)          // 2.302585092994046

// Trigonometry
Math.sin(0)
Math.sin(60)

Math.cos(0)
Math.cos(60)




///////////////// Strings ////////////
Strings are texts, which are under single , double, back-tick quote.
eg: 
let emptyStr = ' '           // an empty space string
let quote = "The saying,'Seeing is Believing' is not correct in 2020."
let quotWithBackTick = `The saying,'Seeing is Believing' is not correct in 2020.`

****string concatenation****
connecting/combining two or more strings together is called concatenation
eg: 
let fullName = firstName + space + lastName; // concatenation, merging two string together.
console.log(fullName);

/////////////////////////////////////////////
Long Literal Strings
A string could be a single character or paragraph or a page. If the string length is too big it does not fit in one line. We can use the backslash character (\) at the end of each line to indicate that the string will continue on the next line. 
Example:

const paragraph = 
"My name is Asabeneh Yetayeh. I live in Finland, Helsinki.\
I am a teacher and I love teaching. I teach HTML, CSS, JavaScript, React, Redux, \
Node.js, Python, Data Analysis and D3.js for anyone who is interested to learn. \
In the end of 2019, I was thinking to expand my teaching and to reach \
to global audience and I started a Python challenge from November 20 - December 19.\
It was one of the most rewarding and inspiring experience.\
Now, we are in 2020. I am enjoying preparing the 30DaysOfJavaScript challenge and \
I hope you are enjoying too."

console.log(paragraph)
///////////////////////////////////////////////////////////

Escape Sequence in Strings (used inside strings)
\n: new line
\t: Tab, means 8 spaces
\\: Back slash
\': Single quote (')
\": Double quote (")


Template Literals (Template Strings)
To create a template strings, we use two back-ticks. We can inject data as expressions inside a template string. To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. See the syntax below.

//syntax `Blah blah blah`
         `Blah blah blah ${someusefulInfo}` // just like i used to do in dart.   

Example : 
console.log(`The sum of 2 and 3 is 5`)              // statically writing the data
let a = 2
let b = 3
console.log(`The sum of ${a} and ${b} is ${a + b}`) // injecting the data dynamically

Example 2: let myInfo = `My name is ${name}, I am workin as a ${proffession}. My age is ${age}`;

Different ways of concatenation
1. concatenating using addition operator (ES5 string addition)
    eg: let sentence = "this is a sentence written by " + authorName + " on " + date;
2. String interpolation method (simillar to dart/flutter)
    eg: 
    let personInfo = `I am ${fullName}. I am ${age}. I live in ${country}.`  //ES6 - String interpolation method

Using a string template or string interpolation method, we can add expressions, which could be a value, or some operations (comparison, arithmetic operations, ternary operation).

let a = 2
let b = 3
console.log(`${a} is greater than ${b}: ${a > b}`)  // output: 2 is greater than 3: false


String methods
The string object has many string methods. There are different string methods that can help us to work with strings.

1. length
let someStr = "blahblah";
someStr.length; // 8

2. we can acess characters in a string the same way we access elements of an array by using index. The first index of the string is zero, and the last index is the length of the string minus one.

console.log(someStr[3]); // h

3. toUpperCase() // returns the strings by making it upper case
    console.log(someStr.toUpperCase()) //BLAHBLAH

4. toLowerCase() // returns the strings by making it lower case
    console.log(someStr.toLowerCase()) //blahblah

5. substr(): It takes two arguments, the starting index and number of characters to slice.

let string = 'JavaScript'
console.log(string.substr(4,6))    // Script
let country = 'Finland'
console.log(country.substr(3, 4))   // land

6. substring(): It takes two arguments, the starting index and the stopping index but it doesn't include the character at the stopping index.

let string = 'JavaScript'

console.log(string.substring(0,4))     // Java
console.log(string.substring(4,10))    // Script
console.log(string.substring(4))       // Script

let country = 'Finland'

console.log(country.substring(0, 3))   // Fin
console.log(country.substring(3, 7))   // land
console.log(country.substring(3))      // land

7. split(): The split method splits a string at a specified place.
hint: you can use it to break sentences at commas, fullstops, empty spaces etc.

code :

let string = '30 Days Of JavaScript'

console.log(string.split())     // Changes to an array -> ["30 Days Of JavaScript"]
console.log(string.split(' '))  // Split to an array at space -> ["30", "Days", "Of", "JavaScript"]

let firstName = 'Asabeneh'

console.log(firstName.split())    // Change to an array - > ["Asabeneh"]
console.log(firstName.split(''))  // Split to an array at each letter ->  ["A", "s", "a", "b", "e", "n", "e", "h"]

let countries = 'Finland, Sweden, Norway, Denmark, and Iceland'

console.log(countries.split(','))  // split to any array at comma -> ["Finland", " Sweden", " Norway", " Denmark", " and Iceland"]
console.log(countries.split(', ')) // Â ["Finland", "Sweden", "Norway", "Denmark", "and Iceland"]


8. trim(): Removes trailing space in the beginning or the end of a string.

code: 
let string = '   30 Days Of JavaScript   '

console.log(string)
console.log(string.trim(' '))

let firstName = ' Asabeneh '

console.log(firstName)
console.log(firstName.trim())  // still removes spaces at the beginning and the end of the string

output:
   30 Days Of JavasCript   
30 Days Of JavasCript
  Asabeneh 
Asabeneh   30 Days Of JavasCript   
30 Days Of JavasCript
  Asabeneh 
Asabeneh

9. includes //checks whether a substring is present in the string or not, returns a boolean and also it is case sensitive
,,,,,,, It takes a substring argument and it checks if substring argument exists in the string. includes() returns a boolean. If a substring exist in a string, it returns true, otherwise it returns false.

code example: 
let string = '30 Days Of JavaScript'

console.log(string.includes('Days'))     // true
console.log(string.includes('days'))     // false - it is case sensitive!
console.log(string.includes('Script'))   // true
console.log(string.includes('script'))   // false
console.log(string.includes('java'))     // false
console.log(string.includes('Java'))     // true

let country = 'Finland'

console.log(country.includes('fin'))     // false
console.log(country.includes('Fin'))     // true
console.log(country.includes('land'))    // true
console.log(country.includes('Land'))    // false


10. replace (), takes two input, 1: oldSubstring , 2: newSubstring
syntax: string.replace(oldsubstring, newsubstring);

let string = '30 Days Of JavaScript'
console.log(string.replace('JavaScript', 'Python')) // 30 Days Of Python

let country = 'Finland'
console.log(country.replace('Fin', 'Noman'))       // Nomanland

11. charAt() //takes index as a input and returns the value at that index.

12. charCodeAt() //takes index as a input and returns the char code ( ASCII number) of the value at that index.

13. indexOf(): Takes a substring and if the substring exists in a string it returns the first position of the substring if does not exist it returns -1.

eg: 

let string = '30 Days Of JavaScript'

console.log(string.indexOf('D'))          // 3
console.log(string.indexOf('Days'))       // 3
console.log(string.indexOf('days'))       // -1
console.log(string.indexOf('a'))          // 4
console.log(string.indexOf('JavaScript')) // 11
console.log(string.indexOf('Script'))     //15
console.log(string.indexOf('script'))     // -1


14. lastIndexOf(): Takes a substring and if the substring exists in a string it returns the last position of the substring if it does not exist it returns -1

15. concat(): it takes many substrings and joins them.
 string.concat(substring, substring, substring)

16. startsWith: it takes a substring as an argument and it checks if the string starts with that specified substring. It returns a boolean(true or false).

//syntax
string.startsWith(substring)


example:  
let string = 'Love is the best to in this world'

console.log(string.startsWith('Love'))   // true
console.log(string.startsWith('love'))   // false
console.log(string.startsWith('world'))  // false

let country = 'Finland'

console.log(country.startsWith('Fin'))   // true
console.log(country.startsWith('fin'))   // false
console.log(country.startsWith('land'))  //  false

17. endsWith: it takes a substring as an argument and it checks if the string ends with that specified substring. It returns a boolean(true or false).

18. search: it takes a substring as an argument and it returns the index of the first match. The search value can be a string or a regular expression pattern. (i have to look into what a expression pattern is.)
syntax
string.search(substring)

19. match: same as search it returns an array if it found a match, otherwise returns null.
string.match(substring)

20. repeat(): it takes a number as argument and it returns the repeated version of the string.

string.repeat(n)

let str = "blah";
console.log(str.repeat(3)); // blahblahblah

**************************************************************************************************************************************************
**************************************************************************************************************************************************
Changing Data Type (casting)
Casting simply means converting one data type into another.
Eg: you may cast a number which is string ie: '69' to a integer to perform arithmetic operations on it.

1. String to int
We can convert string number to a number. Any number inside a quote is a string number. An example of a string number: '10', '5', etc. We can convert string to number using the following methods:

a. parseInt()
let num = '10'
let numInt = parseInt(num)
console.log(numInt) // 10

b. Number()
let num = '10'
let numInt = Number(num)

console.log(numInt) // 10

c. Plus sign(+)
let num = '10'
let numInt = +num

console.log(numInt) // 10


2. String to float
can be done in three ways
a. parseFloat()
b. Number()
c. Plus sign(+)

3. Float to int
let num = 9.81
let numInt = parseInt(num)

console.log(numInt) // 9 



//RegExp or regexp means regular expressions


a regular expression is written in the form of /pattern/modifiers where âpatternâ is the regular expression itself, and âmodifiersâ are a series of characters indicating various options. The âmodifiersâ part is optional.

/g enables âglobalâ matching. When using the replace() method, specify this modifier to replace all matches, rather than only the first one.
/i makes the regex match case insensitive.
/m enables âmulti-line modeâ. In this mode, the caret and dollar match before and after line breaks in the subject string.

use cases : can help find a particular pattern inside an String.



Regexp Methods of The String Class
To test if a particular regex matches (part of) a string, you can call the stringsâs match() method: if (myString.match(/regex/)) { /*Success!*/ }. If you want to verify user input, you should use anchors to make sure that you are testing against the entire string. To test if the user entered a number, use: myString.match(/^\d+$/). /\d+/ matches any string containing one or more digits, but /^\d+$/ matches only strings consisting entirely of digits.

To do a search and replace with regexes, use the stringâs replace() method: myString.replace(/replaceme/g, "replacement"). Using the /g modifier makes sure that all occurrences of âreplacemeâ are replaced. The second parameter is an normal string with the replacement text.

Using a stringâs split() method allows you to split the string into an array of strings using a regular expression to determine the positions at which the string is splitted. E.g. myArray = myString.split(/,/) splits a comma-delimited list into an array. The commaâs themselves are not included in the resulting array of strings.


read more here :https://www.regular-expressions.info/javascript.html;

